// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PharmacyCapstone.Data;

#nullable disable

namespace PharmacyCaptsone.Migrations
{
    [DbContext(typeof(PharmacyCapstoneDbContext))]
    [Migration("20250619054434_AddMedicationSeedData")]
    partial class AddMedicationSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c88940ef-3b1c-4f50-a424-c17f3d3577f6",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAisLQtPA9gqW9bWXjgYXI9NugyBzavyJF3XvPAwd3ZCTA3b0dXuyJRG3GPDKtgtng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be921260-1b27-4636-a27f-9a43b21d8664",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PharmacyCapstone.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Apotex Corp",
                            Name = "Amoxicillin",
                            QuantityInStock = 100,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(2026, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Merck",
                            Name = "Lisinopril",
                            QuantityInStock = 150,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            ExpirationDate = new DateTime(2026, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Teva Pharmaceuticals",
                            Name = "Simvastatin",
                            QuantityInStock = 200,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            ExpirationDate = new DateTime(2026, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Bristol-Myers Squibb",
                            Name = "Metformin",
                            QuantityInStock = 120,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 5,
                            ExpirationDate = new DateTime(2026, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Pfizer",
                            Name = "Amlodipine",
                            QuantityInStock = 180,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 6,
                            ExpirationDate = new DateTime(2025, 7, 14, 0, 44, 34, 329, DateTimeKind.Local).AddTicks(6399),
                            Manufacturer = "Apotex Corp",
                            Name = "Atorvastatin",
                            QuantityInStock = 50,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 7,
                            ExpirationDate = new DateTime(2025, 7, 19, 0, 44, 34, 329, DateTimeKind.Local).AddTicks(6454),
                            Manufacturer = "Merck",
                            Name = "Levothyroxine",
                            QuantityInStock = 100,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 8,
                            ExpirationDate = new DateTime(2025, 8, 19, 0, 44, 34, 329, DateTimeKind.Local).AddTicks(6458),
                            Manufacturer = "Teva Pharmaceuticals",
                            Name = "Metoprolol",
                            QuantityInStock = 75,
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("PharmacyCapstone.Models.MedicationSupplier", b =>
                {
                    b.Property<int>("MedicationId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("MedicationId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("MedicationSuppliers");

                    b.HasData(
                        new
                        {
                            MedicationId = 1,
                            SupplierId = 1
                        },
                        new
                        {
                            MedicationId = 2,
                            SupplierId = 2
                        },
                        new
                        {
                            MedicationId = 3,
                            SupplierId = 3
                        },
                        new
                        {
                            MedicationId = 4,
                            SupplierId = 4
                        },
                        new
                        {
                            MedicationId = 5,
                            SupplierId = 5
                        });
                });

            modelBuilder.Entity("PharmacyCapstone.Models.RestockLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MedicationId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantityAdded")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("RestockLogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicationId = 1,
                            QuantityAdded = 50,
                            SupplierId = 1,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2025, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicationId = 2,
                            QuantityAdded = 75,
                            SupplierId = 2,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicationId = 3,
                            QuantityAdded = 100,
                            SupplierId = 3,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(2025, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicationId = 4,
                            QuantityAdded = 60,
                            SupplierId = 4,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(2025, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicationId = 5,
                            QuantityAdded = 80,
                            SupplierId = 5,
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("PharmacyCapstone.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfo = "Jane Doe, 555-123-4567, jane.doe@mckesson.com",
                            Name = "McKesson Corporation",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            ContactInfo = "John Smith, 555-987-6543, john.smith@cardinalhealth.com",
                            Name = "Cardinal Health",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            ContactInfo = "Alice Johnson, 555-246-8013, alice.johnson@amerisourcebergen.com",
                            Name = "AmerisourceBergen",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            ContactInfo = "Bob Williams, 555-135-7924, bob.williams@cvshealth.com",
                            Name = "CVS Health",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 5,
                            ContactInfo = "Emily Brown, 555-864-2057, emily.brown@walgreens.com",
                            Name = "Walgreens Boots Alliance",
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("PharmacyCapstone.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PharmacyCapstone.Models.Medication", b =>
                {
                    b.HasOne("PharmacyCapstone.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("PharmacyCapstone.Models.MedicationSupplier", b =>
                {
                    b.HasOne("PharmacyCapstone.Models.Medication", "Medication")
                        .WithMany("MedicationSuppliers")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyCapstone.Models.Supplier", "Supplier")
                        .WithMany("MedicationSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PharmacyCapstone.Models.RestockLog", b =>
                {
                    b.HasOne("PharmacyCapstone.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyCapstone.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyCapstone.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Supplier");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("PharmacyCapstone.Models.Supplier", b =>
                {
                    b.HasOne("PharmacyCapstone.Models.UserProfile", "userProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userProfile");
                });

            modelBuilder.Entity("PharmacyCapstone.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("PharmacyCapstone.Models.Medication", b =>
                {
                    b.Navigation("MedicationSuppliers");
                });

            modelBuilder.Entity("PharmacyCapstone.Models.Supplier", b =>
                {
                    b.Navigation("MedicationSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
